import React, { useState } from 'react';
import ResultsGrid from './ResultGrid';
import ResultOptions from './ResultOptions';
import '../styles/InputFields.css';

const InputFields: React.FC = () => {
    const [activeTab, setActiveTab] = useState('Mood'); // Default tab is 'Mood'
    const [artist1, setArtist1] = useState('');
    const [artist2, setArtist2] = useState('');
    const [mood, setMood] = useState('');
    const [genre, setGenre] = useState('');
    const [instrument, setInstrument] = useState('');
    const [bpm, setBpm] = useState('low');
    const [songs, setSongs] = useState<{ song: string; artist: string; imageUrl?: string }[]>([]);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const handleLogin = async () => {
        const clientID = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID || '2e998fe1e57848b8a0a003bbe111595a'; // Secure this
        const redirectUri = 'http://localhost:3000/callback'; // Update for production
        const scopes = ['user-read-private', 'playlist-modify-public'];
        const authUrl = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${encodeURIComponent(scopes.join(' '))}&redirect_uri=${encodeURIComponent(redirectUri)}`;
        window.open(authUrl, '_blank', 'width=500,height=500');
    };

    const handleSubmit = async () => {
        setError('');
        setIsLoading(true);
        try {
            const token = localStorage.getItem('spotifyAuthToken');
            const userId = localStorage.getItem('spotifyUserId');

            if (!token || !userId) {
                throw new Error('Spotify authentication required.');
            }

            const response = await fetch('/api/recommended-songs', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ artist1, artist2, mood, genre, instrument, bpm, token, userId }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to fetch recommendations');
            }

            const data = await response.json();
            console.log('Final Playlist Data:', data.playlist);

            // Store the playlist ID in localStorage for ResultOptions.tsx
            if (data.playlist && data.playlist.playlistId) {
                localStorage.setItem('SpotifyPlaylistId', data.playlist.playlistId);
            }

            // Update songs with the detailed track information
            setSongs(data.playlist.tracks || []);
        } catch (err: any) {
            console.error('Error:', err);
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    const handleClick = () => {
        const currentTime = Date.now();
        const tokenExpiration = localStorage.getItem('spotifyTokenExpiration');
        const token = localStorage.getItem('spotifyAuthToken');

        if (!token || !tokenExpiration || currentTime >= parseInt(tokenExpiration)) {
            // Expired or no token
            handleLogin();
        } else {
            handleSubmit(); // Fetch recommendations and create Spotify playlist
        }
    };

    return (
        <div className="input-fields">
            {/* Tabs */}
            <div className="segmented-control">
                <input
                    type="radio"
                    id="tab-1"
                    name="tabs"
                    checked={activeTab === 'Artist to Artist'}
                    onChange={() => setActiveTab('Artist to Artist')}
                />
                <label htmlFor="tab-1">Artist to Artist</label>

                <input
                    type="radio"
                    id="tab-2"
                    name="tabs"
                    checked={activeTab === 'Song to Song'}
                    onChange={() => setActiveTab('Song to Song')}
                />
                <label htmlFor="tab-2">Song to Song</label>

                <input
                    type="radio"
                    id="tab-3"
                    name="tabs"
                    checked={activeTab === 'Mood'}
                    onChange={() => setActiveTab('Mood')}
                />
                <label htmlFor="tab-3">Mood</label>

                <input
                    type="radio"
                    id="tab-4"
                    name="tabs"
                    checked={activeTab === 'Genre | Instrument'}
                    onChange={() => setActiveTab('Genre | Instrument')}
                />
                <label htmlFor="tab-4">Genre | Instrument</label>

                <input
                    type="radio"
                    id="tab-5"
                    name="tabs"
                    checked={activeTab === 'Genre | BPM'}
                    onChange={() => setActiveTab('Genre | BPM')}
                />
                <label htmlFor="tab-5">Genre | BPM</label>

                <div className="segmented-control__indicator" />
            </div>

            {/* Inputs */}
            {activeTab === 'Artist to Artist' && (
                <div className="inputs">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Kanye West"
                    />
                    <input
                        type="text"
                        value={artist2}
                        onChange={e => setArtist2(e.target.value)}
                        placeholder="Taylor Swift"
                    />
                </div>
            )}

            {activeTab === 'Song to Song' && (
                <div className="inputs">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Song 1 (e.g., Blinding Lights)"
                    />
                    <input
                        type="text"
                        value={artist2}
                        onChange={e => setArtist2(e.target.value)}
                        placeholder="Song 2 (e.g., Bad Guy)"
                    />
                </div>
            )}

            {activeTab === 'Mood' && (
                <div className="inputs">
                    <input
                        type="text"
                        value={mood}
                        onChange={e => setMood(e.target.value)}
                        placeholder="We'll create a playlist based on how you feel.."
                    />
                </div>
            )}

            {activeTab === 'Genre | Instrument' && (
                <div className="inputs">
                    <select
                        value={genre}
                        onChange={e => setGenre(e.target.value)}
                    >
                        <option value="">Select Genre</option>
                        <option value="pop">Pop</option>
                        <option value="rock">Rock</option>
                        <option value="jazz">Jazz</option>
                    </select>
                    <select
                        value={instrument}
                        onChange={e => setInstrument(e.target.value)}
                    >
                        <option value="">Select Instrument</option>
                        <option value="guitar">Guitar</option>
                        <option value="piano">Piano</option>
                        <option value="violin">Violin</option>
                    </select>
                </div>
            )}

            {activeTab === 'Genre | BPM' && (
                <div className="inputs">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Genre (e.g., Pop)"
                    />
                    <select
                        value={bpm}
                        onChange={e => setBpm(e.target.value)}
                    >
                        <option value="low">Low</option>
                        <option value="mid">Mid</option>
                        <option value="high">High</option>
                    </select>
                </div>
            )}

            {/* Submit Button */}
            <button onClick={handleClick} disabled={isLoading}>
                {isLoading ? 'Processing...' : 'Send'}
            </button>

            {error && <div className="error">{error}</div>}

            {/* Pass the songs array to ResultsGrid */}
            <ResultsGrid results={songs} />

            {/* Include ResultOptions component */}
            {songs.length > 0 && <ResultOptions />}
        </div>
    );
};

export default InputFields;



// ---------------------------------


import React, { useState } from 'react';
import ResultsGrid from './ResultGrid';
import ResultOptions from './ResultOptions';

const InputFields: React.FC = () => {
    const [activeTab, setActiveTab] = useState('Based on Mood'); // Default tab is 'Mood'
    const [artist1, setArtist1] = useState('');
    const [artist2, setArtist2] = useState('');
    const [mood, setMood] = useState('');
    const [genre, setGenre] = useState('');
    const [instrument, setInstrument] = useState('');
    const [bpm, setBpm] = useState('low');
    const [songs, setSongs] = useState<{ song: string; artist: string; imageUrl?: string }[]>([]);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const handleLogin = async () => {
        const clientID = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID || '2e998fe1e57848b8a0a003bbe111595a'; // Secure this
        const redirectUri = 'http://localhost:3000/callback'; // Update for production
        const scopes = ['user-read-private', 'playlist-modify-public'];
        const authUrl = `https://accounts.spotify.com/authorize?response_type=token&client_id=${clientID}&scope=${encodeURIComponent(scopes.join(' '))}&redirect_uri=${encodeURIComponent(redirectUri)}`;
        window.open(authUrl, '_blank', 'width=500,height=500');
    };

    const handleSubmit = async () => {
        setError('');
        setIsLoading(true);
        try {
            const token = localStorage.getItem('spotifyAuthToken');
            const userId = localStorage.getItem('spotifyUserId');

            if (!token || !userId) {
                throw new Error('Spotify authentication required.');
            }

            const response = await fetch('/api/recommended-songs', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ artist1, artist2, mood, genre, instrument, bpm, token, userId }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to fetch recommendations');
            }

            const data = await response.json();
            console.log('Final Playlist Data:', data.playlist);

            // Store the playlist ID in localStorage for ResultOptions.tsx
            if (data.playlist && data.playlist.playlistId) {
                localStorage.setItem('SpotifyPlaylistId', data.playlist.playlistId);
            }

            // Update songs with the detailed track information
            setSongs(data.playlist.tracks || []);
        } catch (err: any) {
            console.error('Error:', err);
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    const handleClick = () => {
        const currentTime = Date.now();
        const tokenExpiration = localStorage.getItem('spotifyTokenExpiration');
        const token = localStorage.getItem('spotifyAuthToken');

        if (!token || !tokenExpiration || currentTime >= parseInt(tokenExpiration)) {
            // Expired or no token
            handleLogin();
        } else {
            handleSubmit(); // Fetch recommendations and create Spotify playlist
        }
    };

    return (
        <div className="flex flex-col items-center space-y-4 mt-6">
            {/* Tabs */}
            <div className="flex space-x-4 mb-4">
                {['Artist to Artist', 'Song to Song', 'Based on Mood', 'Genre | Instrument', 'Genre | BPM'].map(tab => (
                    <button
                        key={tab}
                        onClick={() => setActiveTab(tab)}
                        className={`px-4 py-2 rounded ${activeTab === tab ? 'bg-blue-500 text-white' : 'bg-gray-200 text-black'}`}
                    >
                        {tab}
                    </button>
                ))}
            </div>

            {/* Inputs */}
            {activeTab === 'Artist to Artist' && (
                <div className="flex space-x-4">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Kanye West"
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    />
                    <input
                        type="text"
                        value={artist2}
                        onChange={e => setArtist2(e.target.value)}
                        placeholder="Taylor Swift"
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    />
                </div>
            )}

            {activeTab === 'Song to Song' && (
                <div className="flex space-x-4">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Song 1 (e.g., Blinding Lights)"
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    />
                    <input
                        type="text"
                        value={artist2}
                        onChange={e => setArtist2(e.target.value)}
                        placeholder="Song 2 (e.g., Bad Guy)"
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    />
                </div>
            )}

            {activeTab === 'Based on Mood' && (
                <div className="flex space-x-4">
                    <input
                        type="text"
                        value={mood}
                        onChange={e => setMood(e.target.value)}
                        placeholder="We'll create a playlist based on how you feel.."
                        className="border rounded px-4 py-2 w-full w-[400px]"
                    />
                </div>
            )}

            {activeTab === 'Genre | Instrument' && (
                <div className="flex space-x-4">
                    <select
                        value={genre}
                        onChange={e => setGenre(e.target.value)}
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    >
                        <option value="">Select Genre</option>
                        <option value="pop">Pop</option>
                        <option value="rock">Rock</option>
                        <option value="jazz">Jazz</option>
                    </select>
                    <select
                        value={instrument}
                        onChange={e => setInstrument(e.target.value)}
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    >
                        <option value="">Select Instrument</option>
                        <option value="guitar">Guitar</option>
                        <option value="piano">Piano</option>
                        <option value="violin">Violin</option>
                    </select>
                </div>
            )}

            {activeTab === 'Genre | BPM' && (
                <div className="flex space-x-4">
                    <input
                        type="text"
                        value={artist1}
                        onChange={e => setArtist1(e.target.value)}
                        placeholder="Genre (e.g., Pop)"
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    />
                    <select
                        value={bpm}
                        onChange={e => setBpm(e.target.value)}
                        className="border rounded px-4 py-2 w-full max-w-xs"
                    >
                        <option value="low">Low</option>
                        <option value="mid">Mid</option>
                        <option value="high">High</option>
                    </select>
                </div>
            )}

            {/* Submit Button */}
            <button
                onClick={handleClick}
                className="bg-blue-500 text-white px-4 py-2 rounded"
                disabled={isLoading}
            >
                {isLoading ? 'Processing...' : 'Send'}
            </button>

            {error && <div className="text-red-500 mt-4">{error}</div>}

            {/* Pass the songs array to ResultsGrid */}
            <ResultsGrid results={songs} />

            {/* Include ResultOptions component */}
            {songs.length > 0 && <ResultOptions />}
        </div>
    );
};

export default InputFields;






:root {
    --primary-light: #8abdff;
    --primary: #6d5dfc;
    --primary-dark: #5b0eeb;
    
    --white: #FFFFFF;
    --greyLight-1: #E4EBF5;
    --greyLight-2: #c8d0e7;
    --greyLight-3: #bec8e4;
    --greyDark: #9baacf;
  }
  
  $shadow: .3rem .3rem .6rem var(--greyLight-2), 
  -.2rem -.2rem .5rem var(--white);
  $inner-shadow: inset .2rem .2rem .5rem var(--greyLight-2), 
  inset -.2rem -.2rem .5rem var(--white);
  
  *, *::before, *::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
  }
  
  html {
    box-sizing: border-box;
    font-size: 62.5%; // 1rem = 10px    100% = 16px
    overflow-y: scroll;
    background: var(--greyLight-1);
    
    @media screen and (min-width: 900px) {
          font-size: 75%; }
  }
  
  .container {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: 'Poppins', sans-serif;
    background: var(--greyLight-1);
  }
  
  .components {
    width: 75rem;
    height: 40rem;
    border-radius: 3rem;
    box-shadow:.8rem .8rem 1.4rem var(--greyLight-2), 
              -.2rem -.2rem 1.8rem var(--white);
    padding: 4rem;
    display: grid;
    grid-template-columns: 17.6rem 19rem 20.4rem;
    grid-template-rows: repeat(autofit, min-content);
    grid-column-gap: 5rem;
    grid-row-gap: 2.5rem;
    align-items: center;
   }
  
  
  /*  BUTTONS  */
  .btn {
    width: 15rem;
    height: 4rem;
    border-radius: 1rem;
    box-shadow: $shadow;
    justify-self: center;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: .3s ease;
  
    &__primary {
      grid-column: 1 / 2;
      grid-row: 4 / 5;
      background: var(--primary);
      box-shadow:inset .2rem .2rem 1rem var(--primary-light), 
                inset -.2rem -.2rem 1rem var(--primary-dark),
                $shadow;
      color: var(--greyLight-1);
  
      &:hover { color: var(--white); }
      &:active {
        box-shadow:inset .2rem .2rem 1rem var(--primary-dark), 
               inset -.2rem -.2rem 1rem var(--primary-light);
      }
    }
  
    &__secondary {
      grid-column: 1 / 2;
      grid-row: 5 / 6;
      color: var(--greyDark);
      &:hover { color: var(--primary); }
      &:active {
        box-shadow: $inner-shadow;
      }
    }
  
    p { 
      font-size: 1.6rem;
    }
  }
  
  
  /*  FORM  */
  .form {
    grid-column: 3 / 4;
    grid-row: 3 / 4;
  
    &__input {
      width: 20.4rem;
      height: 4rem;
      border: none;
      border-radius: 1rem;
      font-size: 1.4rem;
      padding-left: 1.4rem;
      box-shadow: $inner-shadow;
      background: none;
      font-family: inherit;
      color: var(--greyDark);
  
      &::placeholder { color: var(--greyLight-3); }
      &:focus { outline: none; box-shadow: $shadow; }
    }
    
  }
  
  /*  SEARCH  */
  .search {
    grid-column: 3 / 4;
    grid-row: 2 / 3;
    position: relative;
    display: flex;
    align-items: center;
  
    &__input {
      width: 20.4rem;
      height: 4rem;
      border: none;
      border-radius: 1rem;
      font-size: 1.4rem;
      padding-left: 3.8rem;
      box-shadow: $inner-shadow;
      background: none;
      font-family: inherit;
      color: var(--greyDark);
  
      &::placeholder { color: var(--greyLight-3); }
      &:focus { 
        outline: none; 
        box-shadow: $shadow; 
  
         + .search__icon {
          color: var(--primary);
        }
      }
    }
  
    &__icon {
      height: 2rem;
      position: absolute;
      font-size: 2rem;
      padding: 0 1rem;
      display: flex;
      color: var(--greyDark);
      transition: .3s ease;
    }
  }
  
  /*  SEGMENTED-CONTROL */
  .segmented-control {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
    width: 20.4rem;
    height: 4rem;
    box-shadow: $shadow;
    border-radius: 1rem;
    display: flex;
    align-items: center;
    position: relative;
  
    input { display: none; }
  
    > input:checked + label {
      transition: all .5s ease;
      color: var(--primary);
      }
  
    &__1, &__2, &__3 {
      width: 6.8rem;
      height: 3.6rem;
      font-size: 1.4rem;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      color: var(--greyDark);
      transition: all .5s ease;
  
      &:hover { color: var(--primary); }
    }
  
    &__color {
      position: absolute;
      height: 3.4rem;
      width: 6.2rem;
      margin-left: .3rem;
      border-radius: .8rem;
      box-shadow: $inner-shadow;
      pointer-events: none;
    }
  }
  
  #tab-1:checked ~ .segmented-control__color {
    transform: translateX(0);
    transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  }
  #tab-2:checked ~ .segmented-control__color {
    transform: translateX(6.8rem);
    transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  }
  #tab-3:checked ~ .segmented-control__color {
    transform: translateX(13.6rem);
    transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  }

  

  <div class="container">
  <div class="components">
    
    <div class="btn btn__primary"><p>Button</p></div>
    <div class="btn btn__secondary"><p>Button</p></div>

    
    <div class="form">
      <input type="text" class="form__input" placeholder="Type anything...">
    </div>
    
    <div class="search">
      <input type="text" class="search__input" placeholder="Search...">
      <div class="search__icon">
        <ion-icon name="search"></ion-icon>
      </div>
    </div>
    
    <div class="segmented-control">
      
      <input type="radio" name="radio2" value="3" id="tab-1" checked/>
      <label for="tab-1" class= "segmented-control__1">
        <p>Tab 1</p></label>
      
      <input type="radio" name="radio2" value="4" id="tab-2" />
      <label for="tab-2" class= "segmented-control__2">
        <p>Tab 2</p></label>
      
      <input type="radio" name="radio2" value="5" id="tab-3" />
      <label for="tab-3" class= "segmented-control__3">
        <p>Tab 3</p></label>
      
      <div class="segmented-control__color"></div>
    </div>
    